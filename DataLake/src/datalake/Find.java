/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package datalake;

import com.toedter.calendar.JTextFieldDateEditor;
import static datalake.Add.blockDateInput;
import java.awt.Desktop;
import java.awt.Frame;
import java.awt.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javax.swing.JOptionPane;

/**
 *
 * @author Wojtek
 */
public class Find extends javax.swing.JFrame {

    ArrayList<DanaPogodowa> records = new ArrayList<DanaPogodowa>();
    Boolean  possibleSearch;
    public Find() {
        initComponents();
        blockDateInput();
        possibleSearch=true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Find files");
        setResizable(false);

        jLabel1.setText("Data poczatkowa");

        jLabel2.setText("Data koncowa");

        jLabel3.setText("Szukany parametr");

        jLabel5.setText("Lokalizacja");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Prędkość dźwięku [m/s]", "Temperatura zmierzona dźwiękiem [°C]", "Ciśnienie atmosferyczne [mbar]", "Temperatura  [°C]", "Wilgotność [%]", "Wskazanie kompasu [°]", "Prędkość U-V", "Prędkość wiatru [m/s]", "Kierunek wiatru", "Skladnik W - śs pionowa predkosci wiatru [m/s]", "Temperatura wewnątrz pomieszczenia [°C]" }));

        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });

        jDateChooser2.setEnabled(false);

        jButton1.setText("wyszukaj");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("otwórz plik");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Szukana wartość");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Średnia", "Min", "Max" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField3)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jButton2)
                        .addGap(52, 52, 52)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

void openCSV(String filename, int comboBoxChoice, int whatToDo) {
        BufferedReader reader;
        try {
            reader = new BufferedReader(new FileReader("jezioroDanych//" + filename));
            DateFormat format = new SimpleDateFormat("dd-MM-yyyy", Locale.ENGLISH);
            String[] data = null;
            String line;
            reader.readLine();
            reader.readLine();
            double min=99999.99;
            double max=-9999.99;
            double avg=0;
    
            
            switch (whatToDo) {
                case 0:
                    int counter=0;
                    while ((line = reader.readLine()) != null) {
                        data = line.split(";");
                
                        if (format.parse(data[0]).before(jDateChooser1.getDate()) ||
                            format.parse(data[0]).after(jDateChooser2.getDate())) {
                            continue;
                        }
                        
                        avg+= Double.parseDouble(data[comboBoxChoice+2]);
                        counter++;
                    }
                    avg/=counter;
                    Frame frame1 = new Frame();
                    JOptionPane.showMessageDialog(frame1, avg, "Średnia wartość",JOptionPane.PLAIN_MESSAGE);
                    break;
                    
                case 1:
                    while ((line = reader.readLine()) != null) {
                        data = line.split(";");
                
                        if (format.parse(data[0]).before(jDateChooser1.getDate()) ||
                            format.parse(data[0]).after(jDateChooser2.getDate())) {
                            continue;
                        }
                        
                        if (Double.parseDouble(data[comboBoxChoice+2]) < min) {
                            min = Double.parseDouble(data[comboBoxChoice+2]);
                        }
                        
                    }
                    Frame frame2 = new Frame();
                    JOptionPane.showMessageDialog(frame2, min, "Minimalna wartość",JOptionPane.PLAIN_MESSAGE);
                    break;
                    
                case 2:
                    while ((line = reader.readLine()) != null) {
                        data = line.split(";");
                
                        if (format.parse(data[0]).before(jDateChooser1.getDate()) ||
                            format.parse(data[0]).after(jDateChooser2.getDate())) {
                            continue;
                        }
                        
                        if (Double.parseDouble(data[comboBoxChoice+2]) > max) {
                            max = Double.parseDouble(data[comboBoxChoice+2]);
                        }
                        
                    }
                    Frame frame3 = new Frame();
                    JOptionPane.showMessageDialog(frame3, max, "Maksymalna wartość",JOptionPane.PLAIN_MESSAGE);
                    break;
            }                
            reader.close();
       
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }
    
    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange
        // TODO add your handling code here:
        if ("date".equals(evt.getPropertyName())) {
            jDateChooser2.setEnabled(true);
            if(jDateChooser2.getDate()!=null && jDateChooser1.getDate().after(jDateChooser2.getDate())) 
                jDateChooser2.setDate(null);
                jDateChooser2.setMinSelectableDate(jDateChooser1.getDate());
        }
    }//GEN-LAST:event_jDateChooser1PropertyChange

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        //otwieranie pliku
        File file = new File("jezioroDanych//bitmapaTEST.bmp");
        Desktop desktop = Desktop.getDesktop();
        if(file.exists()) try {
            desktop.open(file);
            
            //otwieranie pliku
            
            
        } catch (IOException ex) {
            Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
        }
              
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ArrayList<String> viableLines = new ArrayList<String>();
        int comboBoxChoice = 0;
        int whatToDo = 0;
        String[] data = null;
        try {
            Date dateStartEntered = jDateChooser1.getDate();
            Date dateStartFile;
            Date dateEndEntered = jDateChooser2.getDate();
            Date dateEndFile;
           
            String locationEntered = jTextField3.getText();
            String locationFile;
            
            comboBoxChoice = jComboBox1.getSelectedIndex();
            whatToDo = jComboBox2.getSelectedIndex();
            
            DateFormat dF = new SimpleDateFormat("dd-MM-yyyy");
            
            BufferedReader reader;
            reader = new BufferedReader(new FileReader("jezioroDanych//meta.txt"));
            String line;
            
            while ((line = reader.readLine()) != null) {
                data = line.split(" ");
                int numberSpace = line.split(" ").length; //liczenie spacji w lini
                dateStartFile = dF.parse(data[numberSpace-3]); //uwzględniamy to że są spacje w nazwie pliku
                dateEndFile = dF.parse(data[numberSpace-2]);
                locationFile = data[numberSpace-1];
                
                if ((dateStartFile.before(dateStartEntered) || dateStartFile.equals(dateStartEntered)) &&
                        (dateEndFile.after(dateEndEntered) || dateEndFile.equals(dateEndEntered)) &&
                        (locationFile.equals(locationEntered))) {
                        viableLines.add(line);
                }             
            }
             
            System.out.println(viableLines);
            if (viableLines.isEmpty()) {
                Frame frame = new Frame();
                JOptionPane.showMessageDialog(frame, "Brak danych dla podanego miejsca\nw danym okresie czasu.",
                       "Komunikat",JOptionPane.WARNING_MESSAGE);
            }

        } catch (ParseException ex) {
            Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        for (String line : viableLines) {
            data = line.split(" ");
            int numberSpace = line.split(" ").length; //liczenie spacji w lini
            String type = data[numberSpace-4];
            String fileName = line.substring(0, line.indexOf(type)-1);
            fileName += "." + type;
            
            System.out.println(fileName);
            System.out.println(comboBoxChoice);
            System.out.println(whatToDo);
            
            if (type.equals("csv")) {
                openCSV(fileName, comboBoxChoice, whatToDo);
            } else if (type.equals("txt")) {
                
            } else if (type.equals("xml")) {
                
            } else if (type.equals("bmp")) {
                
            } else {
                Frame frame = new Frame();
                JOptionPane.showMessageDialog(frame, "Nie obsługiwany format!",
                       "Komunikat",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

//     public  void załadujDane(String plik) throws FileNotFoundException {
//             BufferedReader reader;
//        try {
//          //  ArrayList records = new ArrayList<DanaPogodowa> ();
//            reader = new BufferedReader(new FileReader(plik));
//            DateFormat format = new SimpleDateFormat("dd.MM.yyyy", Locale.ENGLISH);
//            String[] data = null;
//            String line;
//            reader.readLine();
//            reader.readLine();
//            while ((line = reader.readLine()) != null) {
//                //  records.add(line);
//                data = line.split(";");
//
//                DanaPogodowa pogoda = new DanaPogodowa();
//                pogoda.data= format.parse(data[0]);
//              
//                if(!data[2].isEmpty())
//                pogoda.predkoscDzwieku = Double.parseDouble(data[2]);
//                records.add(pogoda);
//            }
//            reader.close();
//            //testy
//            jTextField1.setText(String.valueOf(records.size()));
//            DanaPogodowa pogoda = new DanaPogodowa();
//            pogoda = (DanaPogodowa) records.get(1);
//            jTextField2.setText( String.valueOf( pogoda.predkoscDzwieku));
//              
//            String pattern = "MM-dd-yyyy";
//
//            DateFormat df = new SimpleDateFormat(pattern);
//
//            String todayAsString = df.format(pogoda.data);
//            
//            jTextField3.setText( todayAsString);
//                
//        }
//
//        catch (FileNotFoundException ex) {
//            Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ParseException ex) {
//            Logger.getLogger(Find.class.getName()).log(Level.SEVERE, null, ex);
//        }
//         
//     }
// 
  public static void   blockDateInput()
  {
      JTextFieldDateEditor editor = (JTextFieldDateEditor) jDateChooser1.getDateEditor();
            editor.setEditable(false);
      editor = (JTextFieldDateEditor) jDateChooser2.getDateEditor();
          editor.setEditable(false);
  }
     /**
     * @param args the command line arguments
     * @throws java.io.FileNotFoundException
     */
    public static void main(String args[]) throws FileNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

            try {
            
                
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(Find.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(Find.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(Find.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(Find.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new Find().setVisible(true);
                }
            });
    
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private static com.toedter.calendar.JDateChooser jDateChooser1;
    private static com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
